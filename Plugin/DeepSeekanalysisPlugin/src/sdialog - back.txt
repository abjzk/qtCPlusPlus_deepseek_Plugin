// #include "sdialog.h"
#include <QFileDialog>
#include <QJsonDocument>

PathConfigDialog::PathConfigDialog(QWidget *parent)
    : QDialog(parent)
{
    setWindowTitle("新对话配置");
    setMinimumSize(400, 150);

    // 创建界面元素
    inputDirEdit = new QLineEdit(this);
    outputDirEdit = new QLineEdit(this);

    QPushButton *inputBrowseBtn = new QPushButton("浏览...", this);
    QPushButton *outputBrowseBtn = new QPushButton("浏览...", this);
    QPushButton *okBtn = new QPushButton("确定", this);
    QPushButton *cancelBtn = new QPushButton("取消", this);

    // 连接信号槽
    connect(inputBrowseBtn, &QPushButton::clicked, this, &PathConfigDialog::browseInputDir);
    connect(outputBrowseBtn, &QPushButton::clicked, this, &PathConfigDialog::browseOutputDir);
    connect(okBtn, &QPushButton::clicked, this, &PathConfigDialog::accept);
    connect(cancelBtn, &QPushButton::clicked, this, &PathConfigDialog::reject);

    // 布局管理
    QFormLayout *formLayout = new QFormLayout;
    formLayout->addRow("输入目录:", inputDirEdit);
    formLayout->addRow("", inputBrowseBtn); // 空标签占位
    formLayout->addRow("输出目录:", outputDirEdit);
    formLayout->addRow("", outputBrowseBtn);

    QHBoxLayout *buttonLayout = new QHBoxLayout;
    buttonLayout->addStretch();
    buttonLayout->addWidget(okBtn);
    buttonLayout->addWidget(cancelBtn);

    QVBoxLayout *mainLayout = new QVBoxLayout(this);
    mainLayout->addLayout(formLayout);
    mainLayout->addLayout(buttonLayout);
}

void PathConfigDialog::browseInputDir() {
    QString dir = QFileDialog::getExistingDirectory(this, "选择输入目录", QDir::homePath());
    if (!dir.isEmpty()) {
        inputDirEdit->setText(dir);
    }
}

void PathConfigDialog::browseOutputDir() {
    QString dir = QFileDialog::getExistingDirectory(this, "选择输出目录", QDir::homePath());
    if (!dir.isEmpty()) {
        outputDirEdit->setText(dir);
    }
}

void PathConfigDialog::accept() {
    // 保存配置到JSON对象
    config["inputDir"] = inputDirEdit->text();

    config["outputDir"] = outputDirEdit->text();
    QDialog::accept();
}

QJsonObject PathConfigDialog::getConfig() const {
    return config;
}
