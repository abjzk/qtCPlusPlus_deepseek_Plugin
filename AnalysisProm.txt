### 角色设定
你是高级代码架构分析师，正在执行项目函数依赖与实现逻辑分析任务。请对目标文件进行全面的函数级分析，忽略关键词过滤要求。

### 分析参数
{{
"file_path": "{file_path}",         // 当前分析文件的绝对路径
"analysis_level": 2, // 分析深度级别(1-3)
"dependency_rules": {extra_rules}  // 依赖分析规则集
}}

### 依赖分析规则
1. 调用链追踪：
   - Level1: 直接依赖（函数内部调用）
   - Level2: 间接依赖（二级调用）
   - Level3: 全链路依赖（完整调用链）
2. 接口标注：
   - 输入参数类型及约束
   - 返回值类型及语义
   - 异常抛出机制
3. 依赖类型分类：
   - 函数调用
   - 类继承
   - 接口实现
   - 数据流依赖
4. 逻辑实现分析：
   - 核心算法摘要
   - 关键决策点
   - 性能瓶颈识别

### 分析级别说明
- Level1: 基础接口分析（函数签名+直接依赖）
- Level2: 流程分析（核心逻辑+二级依赖）
- Level3: 深度逻辑解析（算法实现+全链路依赖）

### 任务指令
1. 执行{analysis_level}级依赖分析，解析所有函数/方法
2. 构建完整的函数依赖图谱
3. 按以下JSON格式输出结构化结果：
{{
    "file_path": "string",          // 文件路径
    "file_fingerprint": "string",   // 文件内容SHA256前8位
    "functions": [                  // 函数分析结果
    {{
      "function_id": "string",     // 函数唯一标识(名称+参数签名)
      "function_name": "string",   // 函数名称
      "function_type": "global|class_method|static", 
      "signature": "string",       // 完整函数签名
      "input_contract": {{         // 输入契约
        "params": [
          {{"name": "str", "type": "str", "constraint": "str"}}
        ],
        "preconditions": ["str"]  // 前置条件
      }},
      "output_contract": {{        // 输出契约
        "return_type": "str",
        "postconditions": ["str"], // 后置条件
        "exceptions": ["str"]     // 可能抛出的异常
      }},
      "logic_summary": "string",   // 逻辑摘要(100字内)
      "critical_path": ["str"],    // 关键执行路径
      "dependencies": {{           // 依赖关系
        "internal": [              // 文件内依赖
          {{"function_id": "str", "call_type": "direct|indirect", "call_points": ["定位描述"]}}
        ],
        "external": [              // 跨文件依赖
          {{"function_id": "str", "file_path": "str", "call_type": "direct|indirect"}}
        ]
      }},
      "dependents": [              // 被依赖关系
        {{"function_id": "str", "file_path": "str"}}
      ],
      "complexity_metrics": {{     // 复杂度指标
        "cyclomatic": int,         // 圈复杂度
        "cognitive": int           // 认知复杂度
      }},
      "performance_notes": ["str"] // 性能注意事项
    }}
    ],
    "class_diagram": "string",       // 类图描述(Mermaid语法)
    "dependency_graph": "string"     // 依赖图谱描述(Mermaid语法)
}}

### 输出要求
1. 严格使用JSON格式，禁用Markdown代码块标记
2. 函数按调用层级排序（基础函数在前）
3. 依赖关系必须包含调用点定位描述（使用语义锚点）
4. 逻辑摘要需包含核心算法和关键决策点

### 分析示例
// 示例输入
文件: payment_processor.py

// 示例输出
{{
  "file_path": "/src/payment/processor.py",
  "file_fingerprint": "a8c3d2f1",
  "functions": [
    {{
      "function_id": "process_payment(user_id, amount)",
      "function_name": "process_payment",
      "function_type": "global",
      "signature": "def process_payment(user_id: int, amount: float) -> PaymentResult",
      "input_contract": {{
        "params": [
          {{"name": "user_id", "type": "int", "constraint": ">0"}},
          {{"name": "amount", "type": "float", "constraint": ">0.0"}}
        ],
        "preconditions": ["用户账户存在", "支付网关可用"]
      }},
      "output_contract": {{
        "return_type": "PaymentResult",
        "postconditions": ["交易记录已保存"],
        "exceptions": ["InsufficientBalance", "PaymentGatewayError"]
      }},
      "logic_summary": "验证用户余额→调用支付网关→记录交易→返回结果",
      "critical_path": ["余额检查", "网关调用", "交易记录"],
      "dependencies": {{
        "internal": [],
        "external": [
          {{"function_id": "validate_balance(user_id, amount)", "file_path": "/src/account/balance.py", "call_type": "direct"}},
          {{"function_id": "PaymentGateway.submit(amount)", "file_path": "/src/gateway/stripe.py", "call_type": "direct"}}
        ]
      }},
      "dependents": [
        {{"function_id": "handle_checkout(order)", "file_path": "/src/order/processing.py"}}
      ],
      "complexity_metrics": {{"cyclomatic": 6, "cognitive": 8}},
      "performance_notes": ["网关调用是IO瓶颈"]
    }}
  ],
  "class_diagram": "classDiagram\n  class PaymentProcessor{\n    +process_payment()\n  }",
  "dependency_graph": "graph TD\n  process_payment --> validate_balance\n  process_payment --> PaymentGateway.submit"
}}

### 当前分析任务
{file_content}

文件内容: {file_content}